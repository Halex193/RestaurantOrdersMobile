# This file was generated based on "schema.json". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface Node {
    id: ID!
}

type AllergenList {
    data: [AllergenNode]
}

type AllergenNode {
    gid: UUID!
    internalName: String!
    number: Int!
}

type AllergenTranslationList {
    data: [AllergenTranslationNode]
}

type AllergenTranslationNode {
    allergen: AllergenNode!
    gid: UUID!
    id: ID
    language: LanguageNode!
    name: String!
}

type ArchiveAccount {
    errors: ExpectedErrorType
    success: Boolean
}

type BookingList {
    data: [BookingNode]
}

type BookingNode {
    dateTime: DateTime!
    gid: UUID!
    id: ID
    numberOfPersons: Int!
    phoneNumber: String!
    table: TableNode!
}

type CategoryList {
    data: [CategoryNode]
}

type CategoryNode {
    gid: UUID!
    id: ID
    internalName: String!
}

type CategoryTranslationList {
    data: [CategoryTranslationNode]
}

type CategoryTranslationNode {
    category: CategoryNode!
    gid: UUID!
    id: ID
    language: LanguageNode!
    name: String!
}

type CreateBookingMutation {
    booking: BookingNode
    errors: [ErrorType]
}

type CreateCategoryMutation {
    category: CategoryNode
    errors: [ErrorType]
}

type CreateDummyMutation {
    dummy: DummyNode
    errors: [ErrorType]
}

type CreateLanguageMutation {
    errors: [ErrorType]
    language: LanguageNode
}

type DeleteAccount {
    errors: ExpectedErrorType
    success: Boolean
}

type DummyList {
    data: [DummyNode]
}

type DummyNode {
    gid: UUID!
    id: ID
    testAge: Int!
    testName: String!
}

type ErrorType {
    errors: [ErrorType]
    field: String
    messages: [String]
}

type LanguageList {
    data: [LanguageNode]
}

type LanguageNode {
    code: String!
    gid: UUID!
    id: ID
    name: String!
}

type MenuItemList {
    data: [MenuItemNode]
}

type MenuItemNode {
    allergens: [AllergenNode!]!
    category: CategoryNode!
    gid: UUID!
    id: ID
    internalName: String!
    picture: String!
    price: Float!
    quantity: String!
}

type MenuItemTranslationList {
    data: [MenuItemTranslationNode]
}

type MenuItemTranslationNode {
    description: String!
    gid: UUID!
    id: ID
    language: LanguageNode!
    menuItem: MenuItemNode!
    name: String!
}

type Mutation {
    archiveAccount(password: String!): ArchiveAccount
    createBooking(input: BookingInput!): CreateBookingMutation
    createCategory(input: CategoryInput!): CreateCategoryMutation
    createDummy(input: DummyInput!): CreateDummyMutation
    createLanguage(input: LanguageInput!): CreateLanguageMutation
    deleteAccount(password: String!): DeleteAccount
    passwordChange(newPassword1: String!, newPassword2: String!, oldPassword: String!): PasswordChange
    passwordReset(newPassword1: String!, newPassword2: String!, token: String!): PasswordReset
    refreshToken(refreshToken: String!): RefreshToken
    register(email: String!, password1: String!, password2: String!, username: String!): Register
    resendActivationEmail(email: String!): ResendActivationEmail
    revokeToken(refreshToken: String!): RevokeToken
    sendPasswordResetEmail(email: String!): SendPasswordResetEmail
    sendSecondaryEmailActivation(email: String!, password: String!): SendSecondaryEmailActivation
    swapEmails(password: String!): SwapEmails
    tokenAuth(email: String, password: String!): ObtainJSONWebToken
    updateAccount(firstName: String, lastName: String): UpdateAccount
    verifyAccount(token: String!): VerifyAccount
    verifySecondaryEmail(token: String!): VerifySecondaryEmail
    verifyToken(token: String!): VerifyToken
}

type ObtainJSONWebToken {
    errors: ExpectedErrorType
    refreshToken: String
    success: Boolean
    token: String
    unarchiving: Boolean
    user: UserNode
}

type Order {
    color: String
    gid: String
    id: ID
    locked: Boolean
    note: String
}

type OrderList {
    data: [Order]
}

type OrderMenuItem {
    color: String
    gid: String
    id: ID
    menuItemId: ID
    quantity: Int
    servingId: ID
}

type OrderMenuItemList {
    data: [OrderMenuItem]
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type PasswordChange {
    errors: ExpectedErrorType
    refreshToken: String
    success: Boolean
    token: String
}

type PasswordReset {
    errors: ExpectedErrorType
    success: Boolean
}

type Query {
    allergen(id: ID!): AllergenNode
    allergenTranslation(id: ID!): AllergenTranslationNode
    allergenTranslations: AllergenTranslationList
    allergens: AllergenList
    booking(id: ID!): BookingNode
    bookings: BookingList
    categories: CategoryList
    category(id: ID!): CategoryNode
    categoryTranslation(id: ID!): CategoryTranslationNode
    categoryTranslations: CategoryTranslationList
    dummies: DummyList
    dummy(id: ID!): DummyNode
    language(id: ID!): LanguageNode
    languages: LanguageList
    me: UserNode
    menuItem(id: ID!): MenuItemNode
    menuItemTranslation(id: ID!): MenuItemTranslationNode
    menuItemTranslations: MenuItemTranslationList
    menuItems(categoryName: String, id: ID, orderBy: String = "-price"): MenuItemList
    table(id: ID!): TableNode
    tables: TableList
    user(id: ID!): UserNode
    users(after: String, before: String, email: String, first: Int, isActive: Boolean, last: Int, status_Archived: Boolean, status_SecondaryEmail: String, status_Verified: Boolean, username: String, username_Icontains: String, username_Istartswith: String): UserNodeConnection
}

type RefreshToken {
    errors: ExpectedErrorType
    payload: GenericScalar
    refreshToken: String
    success: Boolean
    token: String
}

type Register {
    errors: ExpectedErrorType
    refreshToken: String
    success: Boolean
    token: String
}

type ResendActivationEmail {
    errors: ExpectedErrorType
    success: Boolean
}

type RevokeToken {
    errors: ExpectedErrorType
    revoked: Int
    success: Boolean
}

type SendPasswordResetEmail {
    errors: ExpectedErrorType
    success: Boolean
}

type SendSecondaryEmailActivation {
    errors: ExpectedErrorType
    success: Boolean
}

type Serving {
    called: Boolean
    code: String
    gid: String
    id: ID
    userId: ID
}

type ServingList {
    data: [Serving]
}

type Subscription {
    hello: String
    orderMenuItems: OrderMenuItemList
    orders: OrderList
    servings: ServingList
}

type SwapEmails {
    errors: ExpectedErrorType
    success: Boolean
}

type TableList {
    data: [TableNode]
}

type TableNode {
    code: Int!
    gid: UUID!
    id: ID
    name: String!
}

type UpdateAccount {
    errors: ExpectedErrorType
    success: Boolean
}

type UserNode implements Node {
    archived: Boolean
    dateJoined: DateTime!
    email: String!
    firstName: String!
    id: ID!
    isActive: Boolean!
    isStaff: Boolean!
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    pk: Int
    secondaryEmail: String
    username: String!
    verified: Boolean
}

type UserNodeConnection {
    edges: [UserNodeEdge]!
    pageInfo: PageInfo!
}

type UserNodeEdge {
    cursor: String!
    node: UserNode
}

type VerifyAccount {
    errors: ExpectedErrorType
    success: Boolean
}

type VerifySecondaryEmail {
    errors: ExpectedErrorType
    success: Boolean
}

type VerifyToken {
    errors: ExpectedErrorType
    payload: GenericScalar
    success: Boolean
}

input BookingInput {
    dateTime: DateTime
    numberOfPersons: Int
    phoneNumber: String
    table: String
}

input CategoryInput {
    internalName: String
}

input DummyInput {
    testAge: Int
    testName: String
}

input LanguageInput {
    code: String
    name: String
}


scalar UUID

scalar DateTime

scalar ExpectedErrorType

scalar GenericScalar